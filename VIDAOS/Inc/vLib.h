#ifndef _VLIB_H
#define _VLIB_H

#include <stdint.h>

// 位图类型：该位图只支持最大8位，如果需要的可扩充至更多位
typedef struct _vBitmap
{
    uint32_t bitmap;
}vBitmap;

/**********************************************************************************************************
** Function name        :   vBitmapInit
** Descriptions         :   初始化bitmap将所有的位全清0
** parameters           :   无
** Returned value       :   无
***********************************************************************************************************/
void vBitmapInit(vBitmap *bitmap);

/**********************************************************************************************************
** Function name        :   vBitmapPosCount
** Descriptions         :   返回最大支持的位置数量
** parameters           :   无
** Returned value       :   最大支持的位置数量
***********************************************************************************************************/
uint32_t vBitmapPosCount(void);

/**********************************************************************************************************
** Function name        :   vBitmapSet
** Descriptions         :   设置bitmap中的某个位
** parameters           :   pos 需要设置的位
** Returned value       :   无
***********************************************************************************************************/
void vBitmapSet(vBitmap *bitmap, uint32_t pos);

/**********************************************************************************************************
** Function name        :   vBitmapClear
** Descriptions         :   清除bitmap中的某个位
** parameters           :   pos 需要清除的位
** Returned value       :   无
***********************************************************************************************************/
void vBitmapClear(vBitmap *bitmap, uint32_t pos);

/**********************************************************************************************************
** Function name        :   vBitmapGetFirstSet
** Descriptions         :   从位图中第0位开始查找，找到第1个被设置的位置序号
** parameters           :   无
** Returned value       :   第1个被设置的位序号
***********************************************************************************************************/
uint32_t vBitmapGetFirstSet(vBitmap *bitmap);

// 双向节点类型
typedef struct _vNode
{
    // 该结点的前一个结点
    struct _vNode *preNode;
    
    // 该结点的后一个结点
    struct _vNode *nextNode;
}vNode;

// 单向节点类型
typedef struct _vSNode
{
    // 该结点的后一个结点
    struct _vSNode *nextNode;
}vSNode;

// 双向链表类型
typedef struct _vList
{
    // 该链表的头结点
    vNode headNode;
    
    // 该链表中所有结点数量
    uint32_t nodeCount;
}vList;

// 单项链表类型
typedef struct _vSList
{
    // 该链表的头结点
    vSNode headNode;
    
    // 该链表中所有结点数量
    uint32_t nodeCount;
}vSList;

/**********************************************************************************************************
** Function name        :   vNodeParent
** Descriptions         :   获取结点所在的父struct结构首地址
** parameters           :   无
** Returned value       :   父struct结构首地址
***********************************************************************************************************/

#define vNodeParent(node, parent, name) (parent*)((uint32_t)node - (uint32_t)&((parent *)0)->name)

/**********************************************************************************************************
** Function name        :   vNodeInit
** Descriptions         :   初始化双向结点类型
** parameters           :   无
** Returned value       :   无
***********************************************************************************************************/
void vNodeInit(vNode *node);

/**********************************************************************************************************
** Function name        :   vListInit
** Descriptions         :   双向链表初始化
** parameters           :   无
** Returned value       :   无
***********************************************************************************************************/
void vListInit(vList *list);

/**********************************************************************************************************
** Function name        :   vListCount
** Descriptions         :   返回双向链表中结点的数量
** parameters           :   无
** Returned value       :   结点数量
***********************************************************************************************************/
uint32_t vListCount(vList *list);

/**********************************************************************************************************
** Function name        :   vListFirst
** Descriptions         :   返回双向链表的首个结点
** parameters           :   list 查询的链表
** Returned value       :   首个结点，如果链表为空，则返回0
***********************************************************************************************************/
vNode *vListFirst(vList *list);

/**********************************************************************************************************
** Function name        :   vListLast
** Descriptions         :   返回双向链表的最后一个结点
** parameters           :   list 查询的链表
** Returned value       :   最后的结点，如果链表为空，则返回0
***********************************************************************************************************/
vNode *vListLast(vList *list);

/**********************************************************************************************************
** Function name        :   vListPre
** Descriptions         :   返回双向链表中指定结点的前一结点
** parameters           :   list 查询的链表
** parameters           :   node 参考结点
** Returned value       :   前一结点结点，如果结点没有前结点（链表为空），则返回0
***********************************************************************************************************/
vNode *vListPre(vList *list, vNode *node);

/**********************************************************************************************************
** Function name        :   vListNext
** Descriptions         :   返回双向链表中指定结点的后一结点
** parameters           :   list 查询的链表
** parameters           :   node 参考结点
** Returned value       :   后一结点结点，如果结点没有前结点（链表为空），则返回0
***********************************************************************************************************/
vNode *vListNext(vList *list, vNode *node);

/**********************************************************************************************************
** Function name        :   vListRemoveAll
** Descriptions         :   移除双向链表中的所有结点
** parameters           :   list 待清空的链表
** Returned value       :   无
***********************************************************************************************************/
void vListRemoveAll(vList *list);

/**********************************************************************************************************
** Function name        :   vListAddFirst
** Descriptions         :   将指定结点添加到双向链表的头部
** parameters           :   list 待插入链表
** parameters			:   node 待插入的结点
** Returned value       :   无
***********************************************************************************************************/
void vListAddFirst(vList *list, vNode *node);

/**********************************************************************************************************
** Function name        :   vListAddLast
** Descriptions         :   将指定结点添加到双向链表的末尾
** parameters           :   list 待插入链表
** parameters			:   node 待插入的结点
** Returned value       :   无
***********************************************************************************************************/
void vListAddLast(vList *list, vNode *node);

/**********************************************************************************************************
** Function name        :   vListRemoveFirst
** Descriptions         :   移除双向链表中的第1个结点
** parameters           :   list 待移除链表
** Returned value       :   如果链表为空，返回0，否则的话，返回第1个结点
***********************************************************************************************************/
vNode *vListRemoveFirst(vList *list);

/**********************************************************************************************************
** Function name        :   vListInsertAfter
** Descriptions         :   将指定的结点插入到某个结点后面
** parameters           :   list 			待插入的链表
** parameters           :   refNode 		参考结点
** parameters           :   nodeToInsert 	待插入的结构
** Returned value       :   无
***********************************************************************************************************/
void vListInsertAfter(vList * list, vNode *refNode, vNode *nodeToInsert);

/**********************************************************************************************************
** Function name        :   vListInsertBefore
** Descriptions         :   将指定的结点插入到某个结点前面
** parameters           :   list 			待插入的链表
** parameters           :   refNode 		参考结点
** parameters           :   nodeToInsert 	待插入的结构
** Returned value       :   无
***********************************************************************************************************/
void vListInsertBefore(vList * list, vNode *refNode, vNode *nodeToInsert);

/**********************************************************************************************************
** Function name        :   vListRemove
** Descriptions         :   将指定结点从双向链表中移除
** parameters           :   list 	待移除的链表
** parameters           :   node 	待移除的结点
** Returned value       :   无
***********************************************************************************************************/
void vListRemove(vList *list, vNode *node);

/**********************************************************************************************************
***********************************************************************************************************/

/**********************************************************************************************************
** Function name        :   vSNodeInit
** Descriptions         :   初始化单向结点类型
** parameters           :   无
** Returned value       :   无
***********************************************************************************************************/
void vSNodeInit(vSNode *sNode);

/**********************************************************************************************************
** Function name        :   vSListInit
** Descriptions         :   单向链表初始化
** parameters           :   无
** Returned value       :   无
***********************************************************************************************************/
void vSListInit(vSList *sList);

/**********************************************************************************************************
** Function name        :   vSListCount
** Descriptions         :   返回单向链表中结点的数量
** parameters           :   无
** Returned value       :   结点数量
***********************************************************************************************************/
uint32_t vSListCount(vSList *sList);

/**********************************************************************************************************
** Function name        :   vSListFirst
** Descriptions         :   返回单向链表的首个结点
** parameters           :   sList 查询的链表
** Returned value       :   首个结点，如果链表为空，则返回0
***********************************************************************************************************/
vSNode *vSListFirst(vSList *sList);

/**********************************************************************************************************
** Function name        :   vListNext
** Descriptions         :   返回单向链表中指定结点的后一结点
** parameters           :   sList 查询的链表
** parameters           :   sNode 参考结点
** Returned value       :   后一结点结点，如果结点没有前结点（链表为空），则返回0
***********************************************************************************************************/
vSNode *vSListNext(vSList *sList, vSNode *sNode);

/**********************************************************************************************************
** Function name        :   vSListRemoveAll
** Descriptions         :   移除单向链表中的所有结点
** parameters           :   sList 待清空的链表
** Returned value       :   无
***********************************************************************************************************/
void vSListRemoveAll(vSList *sList);

/**********************************************************************************************************
** Function name        :   vSListAddFirst
** Descriptions         :   将指定结点添加到单向链表的头部
** parameters           :   sList 待插入链表
** parameters			:   sNode 待插入的结点
** Returned value       :   无
***********************************************************************************************************/
void vSListAddFirst(vSList *sList, vSNode *sNode);

/**********************************************************************************************************
** Function name        :   vSListRemoveFirst
** Descriptions         :   移除单向链表中的第1个结点
** parameters           :   sList 待移除链表
** Returned value       :   如果链表为空，返回0，否则的话，返回第1个结点
***********************************************************************************************************/
vSNode *vSListRemoveFirst(vSList *sList);

#endif
